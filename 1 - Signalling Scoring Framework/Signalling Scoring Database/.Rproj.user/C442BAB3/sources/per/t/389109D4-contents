library(readxl)

####Difference in abudancy between climates#######
butterfly <- read_excel("../Database spreadsheet.xlsx", skip =2) ### remember to check for number of rows above
butterfly$binomial <- paste(butterfly$genus, butterfly$species)
butterfly <- butterfly[!is.na(butterfly$species),]
war_sco <- read_excel("../butterfly_WarScor-ordered.xlsx", skip = 1)

############Join
join <- unique(butterfly[,c("climate", "binomial")])
join$dorsal <- war_sco$`Warning Colour Score...17`[match(join$binomial, war_sco$Species)]
join$ventral <- war_sco$`Warning Colour Score...12`[match(join$binomial, war_sco$Species)]
join$defven <- war_sco$`Defensive Strategy...11`[match(join$binomial, war_sco$Species)]
join$defdor <- war_sco$`Defensive Strategy...16`[match(join$binomial, war_sco$Species)]


dorsalCounts <- sapply(na.omit(unique(join$climate)), function(clim) {
  sapply(0:5, function(score) {
    sum(join$climate == clim & join$dorsal == score, na.rm = TRUE)
  })
})
dorsalProportion <- sapply(na.omit(unique(join$climate)), function(clim) {
  climJoin <- join[!is.na(join$dorsal) & !is.na(join$climate), ]
  climSpecies <- length(unique(climJoin$binomial[climJoin$climate == clim]))
  sapply(0:5, function(score) {
    sum(join$climate == clim & join$dorsal == score, na.rm = TRUE) / climSpecies
  })
})
ventralCounts <- sapply(na.omit(unique(join$climate)), function(clim) {
  sapply(0:5, function(score) {
    sum(join$climate == clim & join$ventral == score, na.rm = TRUE)
  })
})
ventralProportion <- sapply(na.omit(unique(join$climate)), function(clim) {
  climJoin <- join[!is.na(join$ventral) & !is.na(join$climate), ]
  climSpecies <- length(unique(climJoin$binomial[climJoin$climate == clim]))
  sapply(0:5, function(score) {
    sum(join$climate == clim & join$ventral == score, na.rm = TRUE) / climSpecies
  })
})

col <- c(Tropical = "orange", "Sub-tropical" = "#ffd0b0", Temperate = "lightBlue")

png("dorsal-counts.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(5, 4, 1, 0.5) + 0.1)
barplot(t(dorsalCounts), ylim = c(0, 20), beside = TRUE, names.arg = 0:5, col = col, xlab = "Warning colour score", ylab = "Species count")
legend("topright", colnames(dorsalCounts), fill = col)
dev.off()

png("ventral-counts.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(5, 4, 1, 0.5) + 0.1)
barplot(t(ventralCounts), ylim = c(0, 35), beside = TRUE, names.arg = 0:5, col = col, xlab = "Warning colour score", ylab = "Species count")
legend("topright", colnames(ventralCounts), fill = col)
dev.off()

propCol <- colorRampPalette(c("yellow", "red"))(6)

png("dorsal-proportion.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(dorsalProportion, beside = FALSE, names.arg = colnames(dorsalProportion), col = propCol, xlab = "", ylab = "Proportion of species")
legend("topright", legend = 5:0, ncol = 2, title = "Warning score", fill = rev(propCol), xpd = NA, inset = c(0.04, -0.5))
dev.off()

png("ventral-proportion.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(ventralProportion, beside = FALSE, names.arg = colnames(ventralProportion), col = propCol, xlab = "", ylab = "Proportion of species")
legend("topright", legend = 5:0, ncol = 2, title = "Warning score", fill = rev(propCol), xpd = NA, inset = c(0.04, -0.5))
dev.off()

################ Defence counts######################

deflab <- unique(join$defven)

ventraldefence <- sapply(na.omit(unique(join$climate)), function(clim) {
  sapply(deflab, function(score) {
    sum(join$climate == clim & join$defven == score, na.rm = TRUE)
  })
  
})

dorsaldefence <- sapply(na.omit(unique(join$climate)), function(clim) {
  sapply(deflab, function(score) {
    sum(join$climate == clim & join$defdor == score, na.rm = TRUE)
  })
})
##################Graphs for defence###################

defcol <- c('gray', '#008837', '#fa0020', '#a6611a')

png("ventral-defence.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(ventraldefence, ylim = c(0, 20), beside = TRUE, names.arg = colnames(ventraldefence), col = defcol, xlab = "", ylab = "Species count")
legend("topright", legend = rev(deflab), ncol = 2, title = "Defense type", fill = rev(defcol), xpd = NA, inset = c(0.04, -0.5))
dev.off()


png("dorsal-defence.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(dorsaldefence, ylim = c(0, 20), beside = TRUE, names.arg = colnames(dorsaldefence), col = defcol, xlab = "", ylab = "Species count")
legend("topright", legend = rev(deflab), ncol = 2, title = "Defense type", fill = rev(defcol), xpd = NA, inset = c(0.04, -0.5))
dev.off()



################### Defence proportions ###############


Dorsaldefprop <- sapply(na.omit(unique(join$climate)), function(clim) {
  climJoin <- join[!is.na(join$defven) & !is.na(join$climate), ]
  climSpecies <- length(unique(climJoin$binomial[climJoin$climate == clim]))
  sapply(deflab, function(score) {
    sum(join$climate == clim & join$defven == score, na.rm = TRUE) / climSpecies
  })
})

ventraldefprop <- sapply(na.omit(unique(join$climate)), function(clim) {
  climJoin <- join[!is.na(join$defdor) & !is.na(join$climate), ]
  climSpecies <- length(unique(climJoin$binomial[climJoin$climate == clim]))
  sapply(deflab, function(score) {
    sum(join$climate == clim & join$defdor == score, na.rm = TRUE) / climSpecies
  })
})

png("ventral-proportion-def.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(ventraldefprop, beside = FALSE, names.arg = colnames(ventralProportion), col = defcol, xlab = "", ylab = "Proportion of species")
legend("topright", legend = rev(deflab), ncol = 2, title = "Warning score", fill = rev(defcol), xpd = NA, inset = c(0.04, -0.5))
dev.off()


png("Dorsal-proportion-def.png", width = 1200, height = 900, type = "cairo", res = 200)
par(mar = c(3, 4, 7, 0.5) + 0.1)
barplot(Dorsaldefprop, beside = FALSE, names.arg = colnames(ventralProportion), col = defcol, xlab = "", ylab = "Proportion of species")
legend("topright", legend = rev(deflab), ncol = 2, title = "Warning score", fill = rev(defcol), xpd = NA, inset = c(0.04, -0.5))
dev.off()
